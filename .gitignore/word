package com.teamface.common;

import java.io.File;
import java.io.FileInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.usermodel.CharacterRun;
import org.apache.poi.hwpf.usermodel.Paragraph;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.hwpf.usermodel.Table;
import org.apache.poi.hwpf.usermodel.TableCell;
import org.apache.poi.hwpf.usermodel.TableIterator;
import org.apache.poi.hwpf.usermodel.TableRow;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;

import com.alibaba.fastjson.JSONObject;

/**
 * @Description:
 * @author: Administrator
 * @date: 2018年10月22日 下午2:48:57
 * @version: 1.0
 */

public class WordTest
{
    public static void main(String[] args)
        throws Exception
    {
        String path = "D:\\Downloads\\怀才简历\\1539683006792%2F尧泰物流-集团首席运营-苟先生-20150805 (1).doc";
        readDocTable(path);
    }
    
    public static void readDocTable(String path)
        throws Exception
    {
        String split = "：";
        String[] splits = new String[] {"：", ":"};
        HWPFDocument doc = new HWPFDocument(new POIFSFileSystem(new FileInputStream(new File(path))));
        // 得到文档的读取范围
        Range range = doc.getRange();
        int nums = range.numParagraphs();
        Set<Integer> fontSizes = new TreeSet<>();
        StringBuilder tempSB = new StringBuilder();
        Map<String, Integer> fontCountMap = new HashMap<>();
        Map<String, Integer> splitCountMap = new HashMap<>();
        Map<String, Paragraph> fontParagraphMap = new LinkedHashMap<>();
        Map<Integer, Table> tableMap = new LinkedHashMap<>();
        TableIterator it = new TableIterator(range);
        while (it.hasNext())
        {
            Table tb = it.next();
            String content = tb.text();
            if (content.trim().length() > 0)
            {
                tableMap.put(tb.getStartOffset(), tb);
            }
        }
        for (int i = 0; i < nums; i++)
        {
            Paragraph paragraph = range.getParagraph(i);
            String content = paragraph.text().trim();
            if (content.length() > 0 && (!paragraph.isInTable() || paragraph.getTableLevel() > 1))
            {
                tempSB.setLength(0);
                int numr = paragraph.numCharacterRuns();
                for (int r = 0; r < numr; r++)
                {
                    CharacterRun cr = paragraph.getCharacterRun(r);
                    if (cr.text().trim().length() > 1)
                    {
                        String fontStr = cr.getFontName() + "&" + cr.getFontSize() + "&" + cr.isBold();
                        for (String s : splits)
                        {
                            if (content.contains(s))
                            {
                                Integer count = fontCountMap.get(fontStr);
                                count = count == null ? 1 : (count + 1);
                                fontCountMap.put(fontStr, count);
                                Integer scount = splitCountMap.get(s);
                                scount = scount == null ? 1 : (scount + 1);
                                splitCountMap.put(s, scount);
                            }
                        }
                        fontSizes.add(cr.getFontSize());
                        tempSB.append(cr.getFontSize()).append("_").append(paragraph.getStartOffset());
                        fontParagraphMap.put(tempSB.toString(), paragraph);
                        break;
                    }
                }
            }
        }
        int max = 0;
        String fontStr = "";
        for (Map.Entry<String, Integer> entry : fontCountMap.entrySet())
        {
            String key = entry.getKey();
            int value = entry.getValue();
            if (value > max)
            {
                max = value;
                fontStr = key;
            }
        }
        max = 0;
        for (Map.Entry<String, Integer> entry : splitCountMap.entrySet())
        {
            String key = entry.getKey();
            int value = entry.getValue();
            if (value > max)
            {
                max = value;
                split = key;
            }
        }
        int lastFontSize = 999;
        List<Map<Integer, List<Paragraph>>> finalLS = new ArrayList<>();
        Map<Integer, List<Paragraph>> fontSizeParagraphMap = new LinkedHashMap<>();
        for (Map.Entry<String, Paragraph> entry : fontParagraphMap.entrySet())
        {
            String key = entry.getKey();
            Paragraph value = entry.getValue();
            int fontSize = Integer.parseInt(key.split("_")[0]);
            if (lastFontSize < fontSize)
            {
                finalLS.add(fontSizeParagraphMap);
                fontSizeParagraphMap = new LinkedHashMap<>();
            }
            List<Paragraph> paragraphs = fontSizeParagraphMap.get(fontSize);
            if (paragraphs == null)
            {
                paragraphs = new ArrayList<>();
            }
            lastFontSize = fontSize;
            paragraphs.add(value);
            fontSizeParagraphMap.put(fontSize, paragraphs);
        }
        if (!finalLS.contains(fontSizeParagraphMap))
        {
            finalLS.add(fontSizeParagraphMap);
        }
        JSONObject dataJson = new JSONObject(true);
        dealParagraphs(tableMap, finalLS, range, split, fontStr, dataJson);
        System.out.println(dataJson.toJSONString());
        doc.close();
    }
    
    public static void dealParagraphs(Map<Integer, Table> tableMap, List<Map<Integer, List<Paragraph>>> finalLS, Range range, String split, String fontStr, JSONObject dataJson)
    {
        int lastpindex=0;
        Table ftable = null;
        String ekey=null,lsekey = null;
        StringBuilder valueSB = new StringBuilder();
        for (Map<Integer, List<Paragraph>> map : finalLS)
        {
            int kindex = 0;
            valueSB.setLength(0);
            boolean first = false;
            String key = null, fkey = null;
            JSONObject djson = new JSONObject(true);
            for (Map.Entry<Integer, List<Paragraph>> entry : map.entrySet())
            {
                for (int i = 0; i < entry.getValue().size(); i++)
                {
                    valueSB.append("\n");
                    Paragraph paragraph = entry.getValue().get(i);
                    String pcontent = paragraph.text().replace("\\r", "").trim();
                    if (i == 0 && !first)
                    {
                        first = true;
                        String[] arr = pcontent.split("\n");
                        fkey = arr[0].trim();
                        pcontent = pcontent.replace(fkey, "");
                    }
                    if (pcontent.length() == 0)
                    {
                        continue;
                    }
                    Integer tableKey = 0;
                    int pindex = paragraph.getStartOffset();
                    for (Map.Entry<Integer, Table> tableE : tableMap.entrySet())
                    {
                        Integer tkey = tableE.getKey();
                        Table table = tableE.getValue();
                        ftable = table;
                        if (tkey<pindex&&tkey>lastpindex)
                        {
                            ftable = null;
                            tableKey = tkey;
                            if(lsekey==null)
                            {
                                dealTable(table, split, dataJson);
                            }
                            else
                            {
                                dealTable(table, split, djson);
                                dataJson.put(lsekey + "_D", djson);
                            }
                            break;
                        }
                    }
                    if (tableKey > 0)
                    {
                        tableMap.remove(tableKey);
                    }
                    lastpindex = pindex;
                    if (pcontent.contains(split))
                    {
                        int numr = paragraph.numCharacterRuns();
                        for (int r = 0; r < numr; r++)
                        {
                            kindex++;
                            CharacterRun cr = paragraph.getCharacterRun(r);
                            String content = cr.text().trim();
                            int index = content.indexOf(split);
                            String tfontStr = cr.getFontName() + "&" + cr.getFontSize() + "&" + cr.isBold();
                            if (index >= 0 && tfontStr.equals(fontStr))
                            {
                                if (key != null)
                                {
                                    djson.put(key, valueSB.toString());
                                    valueSB.setLength(0);
                                }
                                key = content.substring(0, index).trim() + "_" + kindex;
                                valueSB.append(content.substring(index + 1).trim());
                            }
                            else
                            {
                                valueSB.append(content);
                            }
                        }
                    }
                    else
                    {
                        valueSB.append(pcontent);
                    }
                    lsekey=key;
                }
                if (valueSB.length() > 0)
                {
                    if (key == null)
                    {
                        String[] tempArr = valueSB.toString().split(split);
                        if (tempArr.length > 1)
                        {
                            String[] valueArr = valueSB.toString().split("\n");
                            for (String value : valueArr)
                            {
                                String[] kvArr = value.split(split, 2);
                                if (kvArr.length > 1)
                                {
                                    dataJson.put(kvArr[0].trim(), kvArr[1].trim());
                                }
                            }
                        }
                        dataJson.put(fkey + "_D", valueSB.toString());
                    }
                    else
                    {
                        djson.put(key, valueSB.toString());
                        dataJson.put(fkey, djson);
                    }
                }
            }
            ekey = fkey+"_"+key;
        }
        if(ftable!=null)
        {
            JSONObject djson = new JSONObject(true);
            dealTable(ftable, split, djson);
            dataJson.put(ekey + "_D", djson);
        }
    }
    
    public static void dealTable(Table table, String split, JSONObject djson)
    {
        for (int r = 0; r < table.numRows(); r++)
        {
            TableRow tr = table.getRow(r);
            int cellsNum = tr.numCells();
            for (int c = 0; c < cellsNum; c++)
            {
                TableCell td = tr.getCell(c);
                String left = td.text().trim();
                if (cellsNum > (c + 1))
                {
                    c++;
                    td = tr.getCell(c);
                    djson.put(left, td.text().trim());
                }
                else
                {
                    String[] arr = left.split(split);
                    djson.put(arr[0].trim(), arr.length > 1 ? arr[1].trim() : "");
                }
            }
        }
    }
}
